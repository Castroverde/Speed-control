-- Made by dagapanis0 [Free to use]
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/random%202"))()
local One = library:Window("Speed Control")

-- Message indicating the script only works on a specific game version
local gameName = "Sonic.EXE: The Disaster 1.3"
print("This script only works on: " .. gameName)
game.StarterGui:SetCore("SendNotification", {
    Title = "Warning",
    Text = "This script only works on: " .. gameName,
    Duration = 10,
})

local speedValue = 16 -- Default speed value
local originalSpeed -- Variable to store the original game speed
local enableSpeedControl = false -- Variable to track if speed control is enabled

-- Function to get the player's humanoid
local function getHumanoid()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        return player.Character.Humanoid
    end
    return nil
end

-- Function to set the speed if speed control is enabled
local function setSpeed()
    local humanoid = getHumanoid()
    if humanoid and enableSpeedControl then
        humanoid.WalkSpeed = speedValue
        print("Speed maintained at " .. speedValue)
    end
end

-- Box for speed input
One:Box("Speed", "Enter speed value", function(value)
    local humanoid = getHumanoid()
    if humanoid then
        local numberValue = tonumber(value)
        if numberValue then
            speedValue = numberValue
            print("Speed set to " .. speedValue)
            game.StarterGui:SetCore("SendNotification", {
                Title = "Speed Control",
                Text = "Speed set to " .. speedValue,
                Duration = 5,
            })
            setSpeed()
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "Speed Control",
                Text = "Invalid input. Speed remains unchanged at the original speed of " .. (originalSpeed or humanoid.WalkSpeed) .. ".",
                Duration = 5,
            })
            print("Invalid speed input")
        end
    end
end)

-- Toggle for enabling/disabling speed control
One:Toggle("Enable Speed Control", function(state)
    local humanoid = getHumanoid()
    if humanoid then
        if state then
            if originalSpeed == nil then
                originalSpeed = humanoid.WalkSpeed -- Store the original speed only once
            end
            enableSpeedControl = true
            humanoid.WalkSpeed = speedValue
            print("Speed control enabled")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Speed Control",
                Text = "Speed control enabled",
                Duration = 5,
            })
            
            -- Listen for changes in the humanoid state
            humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(setSpeed)
            humanoid.StateChanged:Connect(setSpeed)
        else
            enableSpeedControl = false
            humanoid.WalkSpeed = originalSpeed or 16 -- Reset to original speed or default to 16 if unknown
            print("Speed control disabled")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Speed Control",
                Text = "Speed control disabled and restored to original speed of " .. (originalSpeed or 16) .. ".",
                Duration = 5,
            })
            originalSpeed = nil -- Reset originalSpeed to allow re-initialization
        end
    end
end)

-- Additional event listeners to prevent speed reset on ability use or being downed
local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(setSpeed)
    humanoid.StateChanged:Connect(setSpeed)
end)